{"version":3,"sources":["images/correct.svg","images/wrong.svg","components/Header.js","components/Icon.js","components/City.js","components/Game.js","components/reducer.js","api/apiRequest.js","api/weather.api.js","components/Setting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","useMemo","navItems","onClick","active","className","href","id","map","item","name","key","text","Icon","isCorrect","width","height","src","correct","wrong","alt","City","city","submitted","loading","unit","country","temperature","Game","score","count","cities","makeGuess","nextCities","length","role","type","disabled","gameActions","reducer","state","action","newState","history","push","payload","forEach","index","handleResponse","response","Promise","resolve","reject","ok","contentType","headers","get","includes","json","then","handleError","error","message","fetchWeatherData","city1Id","city2Id","url","body","method","Headers","append","options","mode","JSON","stringify","fetch","jsonRequest","component","dispatch","htmlFor","value","checked","onChange","e","target","city1","selected","city2","App","defaultState","useState","setActive","setLoading","setSubmitted","setIsCorrect","chosenCity","correctCity","selection","setSelection","useReducer","ActiveComponent","find","useEffect","res","list","main","temp","temps","logMoves","err","console","log","sampleSize","cityList","chosen","logItem","useCallback","cityId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8941cb8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.5e600e11.svg\";","module.exports = __webpack_public_path__ + \"static/media/wrong.e98fe797.svg\";","import React, { useMemo } from 'react'\n\nconst Header = (props) =>\n  useMemo(() => {\n    const { navItems, onClick, active } = props\n    return (\n      <header className=\"App-header\">\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <div className=\"container\">\n            <a className=\"navbar-brand\" href=\"/\">\n              Hot Cities\n            </a>\n            <div className=\"\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav mr-auto\">\n                {navItems &&\n                  navItems.map((item) => {\n                    return (\n                      <li\n                        className={`nav-item ${\n                          active === item.name ? 'active' : ''\n                        }`}\n                        key={item.name}\n                        onClick={() => onClick(item.name)}\n                      >\n                        <span className=\"nav-link\">{item.text}</span>\n                      </li>\n                    )\n                  })}\n              </ul>\n            </div>\n          </div>\n        </nav>\n      </header>\n    )\n  }, [props])\nexport default Header\n","import React, { useMemo } from 'react'\nimport correct from '../images/correct.svg'\nimport wrong from '../images/wrong.svg'\n\nconst Icon = (props) =>\n  useMemo(() => {\n    const { isCorrect, width, height } = props\n    return (\n      <img\n        src={isCorrect ? correct : wrong}\n        width={width}\n        height={height}\n        alt={isCorrect ? 'correct' : 'wrong'}\n      />\n    )\n  }, [props])\nexport default Icon\n","import React, { useMemo } from 'react'\n\nconst City = (props) =>\n  useMemo(() => {\n    const { city, isCorrect, onClick, submitted, loading, unit } = props\n    return (\n      <div className=\"col\" onClick={() => (!submitted ? onClick(city.id) : {})}>\n        <div\n          className={`card ${\n            submitted && !loading\n              ? isCorrect\n                ? 'alert-success'\n                : 'alert-danger'\n              : 'alert-secondary'\n          }`}\n        >\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">City Name: {(city || {}).name}</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">\n              Country: {(city || {}).country}\n            </h6>\n            <p className=\"card-text\">\n              Temperature: {city.temperature}{' '}\n              {city.temperature ? (unit === 'metric' ? '℃' : '℉') : ''}\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }, [props])\nexport default City\n","import React, { useMemo } from 'react'\nimport Icon from './Icon'\nimport City from './City'\nconst Game = (props) =>\n  useMemo(() => {\n    const {\n      score,\n      count,\n      cities,\n      loading,\n      submitted,\n      makeGuess,\n      isCorrect,\n      nextCities,\n      unit\n    } = props\n    return (\n      <div className=\"container\">\n        <div className=\"justify-content-center question\">\n          <h3 className=\"text-primary text-center\">\n            Guess Which City Is Hotter Right Now!\n          </h3>\n          <h6 className=\"text-secondary text-center\">\n            Only Correct Answer Gives You A Point\n          </h6>\n        </div>\n        <div className=\"row d-flex justify-content-center mx-auto\">\n          {cities && cities.length > 0 && (\n            <City\n              city={cities[0]}\n              isCorrect={\n                cities[0].temperature !== null &&\n                cities[1].temperature &&\n                cities[0].temperature > cities[1].temperature\n              }\n              submitted={submitted}\n              onClick={makeGuess}\n              loading={loading}\n              unit={unit}\n            />\n          )}\n          <div className=\"col-md-auto align-middle text-center align-self-center\">\n            {loading ? (\n              <div className=\"spinner-border text-primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            ) : (\n              <h4 className=\"text-primary\">OR</h4>\n            )}\n          </div>\n          {cities && cities.length > 0 && (\n            <City\n              city={cities[1]}\n              isCorrect={\n                cities[0].temperature !== null &&\n                cities[1].temperature &&\n                cities[0].temperature < cities[1].temperature\n              }\n              submitted={submitted}\n              onClick={makeGuess}\n              loading={loading}\n              unit={unit}\n            />\n          )}\n        </div>\n        <div className=\"row justify-content-center\">\n          {submitted && !loading && (\n            <h4 className={`${isCorrect ? 'text-success' : 'text-danger'}`}>\n              {isCorrect ? 'Correct!' : 'Wrong!'}{' '}\n              <Icon isCorrect={isCorrect} width={25} height={25} />\n            </h4>\n          )}\n        </div>\n        <div className=\"row justify-content-center\">\n          <span className=\"text-primary\">\n            Your Score: {score + '/' + count}\n          </span>\n        </div>\n        <div className=\"row justify-content-center\">\n          <button\n            id={'next-btn'}\n            type=\"button\"\n            className=\"btn btn-primary btn-lg\"\n            disabled={!submitted || loading}\n            onClick={() => nextCities()}\n          >\n            Next Cities\n          </button>\n        </div>\n      </div>\n    )\n  }, [props])\nexport default Game\n","export const initialState = () => ({\n  score: 0,\n  count: 1,\n  history: [],\n  cities: [],\n  unit: 'metric'\n})\n\nexport const gameActions = {\n  addScore: 'addScore',\n  addCount: 'addCount',\n  logMove: 'logMove',\n  setCities: 'setCities',\n  setTemperatures: 'setTemperatures',\n  changeUnit: 'changeUnit',\n  resetState: 'resetState'\n}\n\nexport default function reducer(state, action) {\n  let newState = { ...state }\n  switch (action.type) {\n    case gameActions.addScore:\n      return { ...state, score: state.score + 1 }\n    case gameActions.addCount:\n      return { ...state, count: state.count + 1 }\n    case gameActions.logMove:\n      newState.history.push(action.payload)\n      return newState\n    case gameActions.setCities:\n      newState.cities = [...action.payload]\n      return newState\n    case gameActions.changeUnit:\n      return { ...state, unit: action.payload }\n    case gameActions.setTemperatures:\n      let cities = state.cities\n      cities &&\n        cities.forEach((city, index) => {\n          city.temperature = action.payload[index]\n        })\n      return { ...state, cities: cities }\n    case gameActions.resetState:\n      return initialState()\n    default:\n      return state\n  }\n}\n","const handleResponse = (response) => {\n  return new Promise((resolve, reject) => {\n    if (response.ok) {\n      let contentType = response.headers.get('content-type')\n      if (contentType && contentType.includes('application/json')) {\n        response.json().then((json) => resolve(json))\n      } else {\n        resolve(response)\n      }\n    } else {\n      response.text().then((text) => reject(text))\n    }\n  })\n}\n\nconst handleError = (error) => {\n  return Promise.reject(error && error.message)\n}\n\nexport const jsonRequest = (url, body, method = 'GET') => {\n  const headers = new Headers()\n\n  headers.append('Accept', 'application/json')\n  let options = { headers, mode: 'cors', method: method }\n  if (body) {\n    options.method = method\n    options.body = JSON.stringify(body)\n    headers.append('Content-Type', 'application/json')\n  }\n  return fetch(url, options).then(handleResponse, handleError)\n}\n","import { jsonRequest } from './apiRequest'\n\nconst baseUrl = 'http://api.openweathermap.org/data/2.5/group?'\nconst appId = 'e08925f8c257a60bae572679dfbda08e'\nexport default function fetchWeatherData(city1Id, city2Id, unit) {\n  return jsonRequest(\n    `${baseUrl}id=${city1Id},${city2Id}&units=${unit}&appid=${appId}`,\n    null,\n    'GET'\n  )\n}\n","import React, { useMemo } from 'react'\nimport { gameActions } from './reducer'\nimport Icon from './Icon'\n\nconst Setting = (props) =>\n  useMemo(() => {\n    const { unit, dispatch, history } = props\n    return (\n      <div className=\"container\">\n        <div className=\"row d-block\">\n          <h3 className=\"text-primary\">Choose Temperature Measurement Unit:</h3>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\" htmlFor=\"metric\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"unit\"\n                id=\"metric\"\n                value=\"metric\"\n                checked={unit === 'metric'}\n                onChange={(e) =>\n                  dispatch({\n                    type: gameActions.changeUnit,\n                    payload: e.target.value\n                  })\n                }\n              />\n              Metric (Celsius)\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <label className=\"form-check-label\" htmlFor=\"imperial\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"unit\"\n                id=\"imperial\"\n                value=\"imperial\"\n                checked={unit === 'imperial'}\n                onChange={(e) =>\n                  dispatch({\n                    type: gameActions.changeUnit,\n                    payload: e.target.value\n                  })\n                }\n              />\n              Imperial (Fahrenheit)\n            </label>\n          </div>\n        </div>\n        {history && history.length > 0 && (\n          <div className=\"row d-block\">\n            <h3 className=\"text-secondary\">Game History:</h3>\n            {history.map((item) => {\n              return (\n                <div\n                  className=\"row w-50 zero-padding h6 d-flex justify-content-center custom-font-size\"\n                  key={item.id}\n                >\n                  <div className=\"col-md-1 align-middle text-center align-self-center\">\n                    <span className=\"text-secondary h4\">{item.id}.</span>\n                  </div>\n                  <div className=\"col\">\n                    <div\n                      className={\n                        item.isCorrect === item.city1.selected\n                          ? 'alert alert-success h-100'\n                          : 'alert alert-danger h-100'\n                      }\n                    >{`${item.city1.name}, ${item.city1.country}, ${item.city1.temperature}`}</div>\n                  </div>\n                  <div className=\"col-md-auto align-middle text-center align-self-center custom-padding\">\n                    <Icon isCorrect={item.isCorrect} width={20} height={20} />\n                  </div>\n                  <div className=\"col\">\n                    <div\n                      className={\n                        item.isCorrect === item.city2.selected\n                          ? 'alert alert-success h-100'\n                          : 'alert alert-danger h-100'\n                      }\n                    >{`${item.city2.name}, ${item.city2.country}, ${item.city2.temperature}`}</div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    )\n  }, [props])\n\nexport default Setting\n","import React, { useCallback, useEffect, useReducer, useState } from 'react'\r\nimport cityList from './cities.json'\r\nimport sampleSize from 'lodash.samplesize'\r\nimport Header from './components/Header'\r\nimport Game from './components/Game'\r\nimport reducer, { gameActions, initialState } from './components/reducer'\r\nimport fetchWeatherData from './api/weather.api'\r\nimport Setting from './components/Setting'\r\n\r\nconst navItems = [\r\n  {\r\n    name: 'game',\r\n    text: 'Game',\r\n    component: Game\r\n  },\r\n  {\r\n    name: 'setting',\r\n    text: 'Setting',\r\n    component: Setting\r\n  }\r\n]\r\nconst App = () => {\r\n  const defaultState = initialState()\r\n  const [active, setActive] = useState('game')\r\n  const [loading, setLoading] = useState(false)\r\n  const [submitted, setSubmitted] = useState(false)\r\n  const [isCorrect, setIsCorrect] = useState(false)\r\n  const [selection, setSelection] = useState({\r\n    chosenCity: null,\r\n    correctCity: null\r\n  })\r\n  const [state, dispatch] = useReducer(reducer, defaultState)\r\n  const ActiveComponent = navItems.find((item) => item.name === active)\r\n    .component\r\n\r\n  useEffect(() => {\r\n    if (!submitted) {\r\n      setSelection(null)\r\n      dispatch({\r\n        type: gameActions.setCities,\r\n        payload: sampleSize(cityList, 2)\r\n      })\r\n    } else {\r\n      const { cities, unit, count } = state\r\n      setLoading(true)\r\n      fetchWeatherData(cities[0].id, cities[1].id, unit).then(\r\n        (res) => {\r\n          const correctCity =\r\n            res.list[0].main.temp > res.list[1].main.temp\r\n              ? res.list[0].id\r\n              : res.list[1].id\r\n          const temps = [res.list[0].main.temp, res.list[1].main.temp]\r\n          dispatch({\r\n            type: gameActions.setTemperatures,\r\n            payload: temps\r\n          })\r\n          setLoading(false)\r\n          setSelection((city) => {\r\n            return {\r\n              ...city,\r\n              correctCity: correctCity\r\n            }\r\n          })\r\n          logMoves(\r\n            cities,\r\n            temps,\r\n            unit,\r\n            selection.chosenCity,\r\n            correctCity,\r\n            count\r\n          )\r\n        },\r\n        (err) => {\r\n          setLoading(false)\r\n          console.log('error', err)\r\n        }\r\n      )\r\n    }\r\n  }, [submitted])\r\n\r\n  useEffect(() => {\r\n    if (selection && selection.chosenCity && selection.correctCity) {\r\n      setIsCorrect(selection.chosenCity === selection.correctCity)\r\n    }\r\n  }, [selection])\r\n\r\n  useEffect(() => {\r\n    if (isCorrect) dispatch({ type: gameActions.addScore })\r\n  }, [isCorrect])\r\n\r\n  useEffect(() => {\r\n    if (submitted) {\r\n      const { cities, unit, count } = state\r\n      setLoading(true)\r\n      fetchWeatherData(cities[0].id, cities[1].id, unit).then(\r\n        (res) => {\r\n          const temps = [res.list[0].main.temp, res.list[1].main.temp]\r\n          dispatch({\r\n            type: gameActions.setTemperatures,\r\n            payload: temps\r\n          })\r\n          setLoading(false)\r\n        },\r\n        (err) => {\r\n          setLoading(false)\r\n          console.log('error', err)\r\n        }\r\n      )\r\n    }\r\n  }, [state.unit])\r\n\r\n  const logMoves = (cities, temps, unit, chosen, correct, id) => {\r\n    const logItem = {\r\n      id: id,\r\n      isCorrect: chosen === correct\r\n    }\r\n    cities &&\r\n      cities.forEach((city, key) => {\r\n        let objKey = 'city' + (key + 1)\r\n        logItem[objKey] = {\r\n          name: city.name,\r\n          country: city.country,\r\n          temperature: `${temps[key]} ${unit === 'metric' ? '℃' : '℉'}`,\r\n          selected: city.id === chosen\r\n        }\r\n      })\r\n    dispatch({ type: gameActions.logMove, payload: logItem })\r\n  }\r\n\r\n  const makeGuess = useCallback((cityId) => {\r\n    setLoading(true)\r\n    setSubmitted(true)\r\n    setSelection((city) => {\r\n      return {\r\n        ...city,\r\n        chosenCity: cityId\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const nextCities = useCallback(() => {\r\n    dispatch({ type: gameActions.addCount })\r\n    setSubmitted(false)\r\n    setIsCorrect(false)\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header navItems={navItems} active={active} onClick={setActive} />\r\n      <ActiveComponent\r\n        {...state}\r\n        loading={loading}\r\n        makeGuess={makeGuess}\r\n        submitted={submitted}\r\n        isCorrect={isCorrect}\r\n        nextCities={nextCities}\r\n        dispatch={dispatch}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}